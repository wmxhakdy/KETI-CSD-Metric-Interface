// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csd-to-metric-collector-grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto;
namespace StorageEngineInstance {
class CSDMetricList;
struct CSDMetricListDefaultTypeInternal;
extern CSDMetricListDefaultTypeInternal _CSDMetricList_default_instance_;
class CSDMetricList_CSDMetric;
struct CSDMetricList_CSDMetricDefaultTypeInternal;
extern CSDMetricList_CSDMetricDefaultTypeInternal _CSDMetricList_CSDMetric_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::CSDMetricList* Arena::CreateMaybeMessage<::StorageEngineInstance::CSDMetricList>(Arena*);
template<> ::StorageEngineInstance::CSDMetricList_CSDMetric* Arena::CreateMaybeMessage<::StorageEngineInstance::CSDMetricList_CSDMetric>(Arena*);
template<> ::StorageEngineInstance::Result* Arena::CreateMaybeMessage<::StorageEngineInstance::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

// ===================================================================

class CSDMetricList_CSDMetric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.CSDMetricList.CSDMetric) */ {
 public:
  inline CSDMetricList_CSDMetric() : CSDMetricList_CSDMetric(nullptr) {}
  ~CSDMetricList_CSDMetric() override;
  explicit PROTOBUF_CONSTEXPR CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDMetricList_CSDMetric(const CSDMetricList_CSDMetric& from);
  CSDMetricList_CSDMetric(CSDMetricList_CSDMetric&& from) noexcept
    : CSDMetricList_CSDMetric() {
    *this = ::std::move(from);
  }

  inline CSDMetricList_CSDMetric& operator=(const CSDMetricList_CSDMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDMetricList_CSDMetric& operator=(CSDMetricList_CSDMetric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDMetricList_CSDMetric& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDMetricList_CSDMetric* internal_default_instance() {
    return reinterpret_cast<const CSDMetricList_CSDMetric*>(
               &_CSDMetricList_CSDMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSDMetricList_CSDMetric& a, CSDMetricList_CSDMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDMetricList_CSDMetric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDMetricList_CSDMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDMetricList_CSDMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDMetricList_CSDMetric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDMetricList_CSDMetric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDMetricList_CSDMetric& from) {
    CSDMetricList_CSDMetric::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDMetricList_CSDMetric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.CSDMetricList.CSDMetric";
  }
  protected:
  explicit CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kCpuUsageFieldNumber = 3,
    kMemoryUsageFieldNumber = 4,
    kDiskUsageFieldNumber = 5,
    kNetworkFieldNumber = 6,
    kWorkingBlockCountFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // float cpu_usage = 3;
  void clear_cpu_usage();
  float cpu_usage() const;
  void set_cpu_usage(float value);
  private:
  float _internal_cpu_usage() const;
  void _internal_set_cpu_usage(float value);
  public:

  // float memory_usage = 4;
  void clear_memory_usage();
  float memory_usage() const;
  void set_memory_usage(float value);
  private:
  float _internal_memory_usage() const;
  void _internal_set_memory_usage(float value);
  public:

  // float disk_usage = 5;
  void clear_disk_usage();
  float disk_usage() const;
  void set_disk_usage(float value);
  private:
  float _internal_disk_usage() const;
  void _internal_set_disk_usage(float value);
  public:

  // float network = 6;
  void clear_network();
  float network() const;
  void set_network(float value);
  private:
  float _internal_network() const;
  void _internal_set_network(float value);
  public:

  // int32 working_block_count = 7;
  void clear_working_block_count();
  int32_t working_block_count() const;
  void set_working_block_count(int32_t value);
  private:
  int32_t _internal_working_block_count() const;
  void _internal_set_working_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.CSDMetricList.CSDMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    float cpu_usage_;
    float memory_usage_;
    float disk_usage_;
    float network_;
    int32_t working_block_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class CSDMetricList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.CSDMetricList) */ {
 public:
  inline CSDMetricList() : CSDMetricList(nullptr) {}
  ~CSDMetricList() override;
  explicit PROTOBUF_CONSTEXPR CSDMetricList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDMetricList(const CSDMetricList& from);
  CSDMetricList(CSDMetricList&& from) noexcept
    : CSDMetricList() {
    *this = ::std::move(from);
  }

  inline CSDMetricList& operator=(const CSDMetricList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDMetricList& operator=(CSDMetricList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDMetricList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDMetricList* internal_default_instance() {
    return reinterpret_cast<const CSDMetricList*>(
               &_CSDMetricList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSDMetricList& a, CSDMetricList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDMetricList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDMetricList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDMetricList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDMetricList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDMetricList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDMetricList& from) {
    CSDMetricList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDMetricList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.CSDMetricList";
  }
  protected:
  explicit CSDMetricList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSDMetricList_CSDMetric CSDMetric;

  // accessors -------------------------------------------------------

  enum : int {
    kCsdMetricListFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  int csd_metric_list_size() const;
  private:
  int _internal_csd_metric_list_size() const;
  public:
  void clear_csd_metric_list();
  ::StorageEngineInstance::CSDMetricList_CSDMetric* mutable_csd_metric_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >*
      mutable_csd_metric_list();
  private:
  const ::StorageEngineInstance::CSDMetricList_CSDMetric& _internal_csd_metric_list(int index) const;
  ::StorageEngineInstance::CSDMetricList_CSDMetric* _internal_add_csd_metric_list();
  public:
  const ::StorageEngineInstance::CSDMetricList_CSDMetric& csd_metric_list(int index) const;
  ::StorageEngineInstance::CSDMetricList_CSDMetric* add_csd_metric_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >&
      csd_metric_list() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.CSDMetricList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric > csd_metric_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result& from) {
    Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSDMetricList_CSDMetric

// string id = 1;
inline void CSDMetricList_CSDMetric::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDMetricList_CSDMetric::id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDMetricList_CSDMetric::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.id)
}
inline std::string* CSDMetricList_CSDMetric::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.CSDMetricList.CSDMetric.id)
  return _s;
}
inline const std::string& CSDMetricList_CSDMetric::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDMetricList_CSDMetric::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::release_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.CSDMetricList.CSDMetric.id)
  return _impl_.id_.Release();
}
inline void CSDMetricList_CSDMetric::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.CSDMetricList.CSDMetric.id)
}

// string ip = 2;
inline void CSDMetricList_CSDMetric::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& CSDMetricList_CSDMetric::ip() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDMetricList_CSDMetric::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
}
inline std::string* CSDMetricList_CSDMetric::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
  return _s;
}
inline const std::string& CSDMetricList_CSDMetric::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void CSDMetricList_CSDMetric::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDMetricList_CSDMetric::release_ip() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
  return _impl_.ip_.Release();
}
inline void CSDMetricList_CSDMetric::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.CSDMetricList.CSDMetric.ip)
}

// float cpu_usage = 3;
inline void CSDMetricList_CSDMetric::clear_cpu_usage() {
  _impl_.cpu_usage_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_cpu_usage() const {
  return _impl_.cpu_usage_;
}
inline float CSDMetricList_CSDMetric::cpu_usage() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.cpu_usage)
  return _internal_cpu_usage();
}
inline void CSDMetricList_CSDMetric::_internal_set_cpu_usage(float value) {
  
  _impl_.cpu_usage_ = value;
}
inline void CSDMetricList_CSDMetric::set_cpu_usage(float value) {
  _internal_set_cpu_usage(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.cpu_usage)
}

// float memory_usage = 4;
inline void CSDMetricList_CSDMetric::clear_memory_usage() {
  _impl_.memory_usage_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_memory_usage() const {
  return _impl_.memory_usage_;
}
inline float CSDMetricList_CSDMetric::memory_usage() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.memory_usage)
  return _internal_memory_usage();
}
inline void CSDMetricList_CSDMetric::_internal_set_memory_usage(float value) {
  
  _impl_.memory_usage_ = value;
}
inline void CSDMetricList_CSDMetric::set_memory_usage(float value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.memory_usage)
}

// float disk_usage = 5;
inline void CSDMetricList_CSDMetric::clear_disk_usage() {
  _impl_.disk_usage_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_disk_usage() const {
  return _impl_.disk_usage_;
}
inline float CSDMetricList_CSDMetric::disk_usage() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.disk_usage)
  return _internal_disk_usage();
}
inline void CSDMetricList_CSDMetric::_internal_set_disk_usage(float value) {
  
  _impl_.disk_usage_ = value;
}
inline void CSDMetricList_CSDMetric::set_disk_usage(float value) {
  _internal_set_disk_usage(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.disk_usage)
}

// float network = 6;
inline void CSDMetricList_CSDMetric::clear_network() {
  _impl_.network_ = 0;
}
inline float CSDMetricList_CSDMetric::_internal_network() const {
  return _impl_.network_;
}
inline float CSDMetricList_CSDMetric::network() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.network)
  return _internal_network();
}
inline void CSDMetricList_CSDMetric::_internal_set_network(float value) {
  
  _impl_.network_ = value;
}
inline void CSDMetricList_CSDMetric::set_network(float value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.network)
}

// int32 working_block_count = 7;
inline void CSDMetricList_CSDMetric::clear_working_block_count() {
  _impl_.working_block_count_ = 0;
}
inline int32_t CSDMetricList_CSDMetric::_internal_working_block_count() const {
  return _impl_.working_block_count_;
}
inline int32_t CSDMetricList_CSDMetric::working_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.CSDMetric.working_block_count)
  return _internal_working_block_count();
}
inline void CSDMetricList_CSDMetric::_internal_set_working_block_count(int32_t value) {
  
  _impl_.working_block_count_ = value;
}
inline void CSDMetricList_CSDMetric::set_working_block_count(int32_t value) {
  _internal_set_working_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.CSDMetricList.CSDMetric.working_block_count)
}

// -------------------------------------------------------------------

// CSDMetricList

// repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
inline int CSDMetricList::_internal_csd_metric_list_size() const {
  return _impl_.csd_metric_list_.size();
}
inline int CSDMetricList::csd_metric_list_size() const {
  return _internal_csd_metric_list_size();
}
inline void CSDMetricList::clear_csd_metric_list() {
  _impl_.csd_metric_list_.Clear();
}
inline ::StorageEngineInstance::CSDMetricList_CSDMetric* CSDMetricList::mutable_csd_metric_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return _impl_.csd_metric_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >*
CSDMetricList::mutable_csd_metric_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return &_impl_.csd_metric_list_;
}
inline const ::StorageEngineInstance::CSDMetricList_CSDMetric& CSDMetricList::_internal_csd_metric_list(int index) const {
  return _impl_.csd_metric_list_.Get(index);
}
inline const ::StorageEngineInstance::CSDMetricList_CSDMetric& CSDMetricList::csd_metric_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return _internal_csd_metric_list(index);
}
inline ::StorageEngineInstance::CSDMetricList_CSDMetric* CSDMetricList::_internal_add_csd_metric_list() {
  return _impl_.csd_metric_list_.Add();
}
inline ::StorageEngineInstance::CSDMetricList_CSDMetric* CSDMetricList::add_csd_metric_list() {
  ::StorageEngineInstance::CSDMetricList_CSDMetric* _add = _internal_add_csd_metric_list();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::CSDMetricList_CSDMetric >&
CSDMetricList::csd_metric_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.CSDMetricList.csd_metric_list)
  return _impl_.csd_metric_list_;
}

// -------------------------------------------------------------------

// Result

// string message = 1;
inline void Result::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Result.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Result.message)
}
inline std::string* Result::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Result.message)
  return _s;
}
inline const std::string& Result::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Result::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Result.message)
  return _impl_.message_.Release();
}
inline void Result::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Result.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto
