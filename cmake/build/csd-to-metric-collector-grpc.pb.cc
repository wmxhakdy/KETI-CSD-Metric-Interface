// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csd-to-metric-collector-grpc.proto

#include "csd-to-metric-collector-grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace StorageEngineInstance {
PROTOBUF_CONSTEXPR CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_usage_)*/0
  , /*decltype(_impl_.memory_usage_)*/0
  , /*decltype(_impl_.disk_usage_)*/0
  , /*decltype(_impl_.network_)*/0
  , /*decltype(_impl_.working_block_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDMetricList_CSDMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDMetricList_CSDMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDMetricList_CSDMetricDefaultTypeInternal() {}
  union {
    CSDMetricList_CSDMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDMetricList_CSDMetricDefaultTypeInternal _CSDMetricList_CSDMetric_default_instance_;
PROTOBUF_CONSTEXPR CSDMetricList::CSDMetricList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.csd_metric_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDMetricListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDMetricListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDMetricListDefaultTypeInternal() {}
  union {
    CSDMetricList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDMetricListDefaultTypeInternal _CSDMetricList_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace StorageEngineInstance
static ::_pb::Metadata file_level_metadata_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto = nullptr;

const uint32_t TableStruct_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.memory_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.disk_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _impl_.working_block_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList, _impl_.csd_metric_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Result, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::StorageEngineInstance::CSDMetricList_CSDMetric)},
  { 13, -1, -1, sizeof(::StorageEngineInstance::CSDMetricList)},
  { 20, -1, -1, sizeof(::StorageEngineInstance::Result)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::StorageEngineInstance::_CSDMetricList_CSDMetric_default_instance_._instance,
  &::StorageEngineInstance::_CSDMetricList_default_instance_._instance,
  &::StorageEngineInstance::_Result_default_instance_._instance,
};

const char descriptor_table_protodef_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"csd-to-metric-collector-grpc.proto\022\025St"
  "orageEngineInstance\"\351\001\n\rCSDMetricList\022G\n"
  "\017csd_metric_list\030\001 \003(\0132..StorageEngineIn"
  "stance.CSDMetricList.CSDMetric\032\216\001\n\tCSDMe"
  "tric\022\n\n\002id\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\021\n\tcpu_usag"
  "e\030\003 \001(\002\022\024\n\014memory_usage\030\004 \001(\002\022\022\n\ndisk_us"
  "age\030\005 \001(\002\022\017\n\007network\030\006 \001(\002\022\033\n\023working_bl"
  "ock_count\030\007 \001(\005\"\031\n\006Result\022\017\n\007message\030\001 \001"
  "(\t2q\n\023MonitoringContainer\022Z\n\021SetCSDMetri"
  "csInfo\022$.StorageEngineInstance.CSDMetric"
  "List\032\035.StorageEngineInstance.Result\"\000B6\n"
  "\026io.grpc.snippet_sampleB\024snippet_sample_"
  "ProtoP\001\242\002\003SSPb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto = {
    false, false, 501, descriptor_table_protodef_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto,
    "csd-to-metric-collector-grpc.proto",
    &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto::offsets,
    file_level_metadata_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto, file_level_enum_descriptors_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto,
    file_level_service_descriptors_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_getter() {
  return &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto(&descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto);
namespace StorageEngineInstance {

// ===================================================================

class CSDMetricList_CSDMetric::_Internal {
 public:
};

CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDMetricList.CSDMetric)
}
CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(const CSDMetricList_CSDMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDMetricList_CSDMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.cpu_usage_){}
    , decltype(_impl_.memory_usage_){}
    , decltype(_impl_.disk_usage_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.working_block_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cpu_usage_, &from._impl_.cpu_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.working_block_count_) -
    reinterpret_cast<char*>(&_impl_.cpu_usage_)) + sizeof(_impl_.working_block_count_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDMetricList.CSDMetric)
}

inline void CSDMetricList_CSDMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.cpu_usage_){0}
    , decltype(_impl_.memory_usage_){0}
    , decltype(_impl_.disk_usage_){0}
    , decltype(_impl_.network_){0}
    , decltype(_impl_.working_block_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDMetricList_CSDMetric::~CSDMetricList_CSDMetric() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDMetricList.CSDMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDMetricList_CSDMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.ip_.Destroy();
}

void CSDMetricList_CSDMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDMetricList_CSDMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.cpu_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.working_block_count_) -
      reinterpret_cast<char*>(&_impl_.cpu_usage_)) + sizeof(_impl_.working_block_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDMetricList_CSDMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StorageEngineInstance.CSDMetricList.CSDMetric.id"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StorageEngineInstance.CSDMetricList.CSDMetric.ip"));
        } else
          goto handle_unusual;
        continue;
      // float cpu_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float memory_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float disk_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.disk_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float network = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.network_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 working_block_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.working_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDMetricList_CSDMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDMetricList.CSDMetric.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDMetricList.CSDMetric.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // float cpu_usage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = this->_internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_cpu_usage(), target);
  }

  // float memory_usage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = this->_internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_memory_usage(), target);
  }

  // float disk_usage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = this->_internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_disk_usage(), target);
  }

  // float network = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = this->_internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_network(), target);
  }

  // int32 working_block_count = 7;
  if (this->_internal_working_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_working_block_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDMetricList.CSDMetric)
  return target;
}

size_t CSDMetricList_CSDMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // float cpu_usage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = this->_internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 4;
  }

  // float memory_usage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = this->_internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    total_size += 1 + 4;
  }

  // float disk_usage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = this->_internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    total_size += 1 + 4;
  }

  // float network = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = this->_internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    total_size += 1 + 4;
  }

  // int32 working_block_count = 7;
  if (this->_internal_working_block_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_working_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDMetricList_CSDMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDMetricList_CSDMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDMetricList_CSDMetric::GetClassData() const { return &_class_data_; }


void CSDMetricList_CSDMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDMetricList_CSDMetric*>(&to_msg);
  auto& from = static_cast<const CSDMetricList_CSDMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = from._internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_internal_set_cpu_usage(from._internal_cpu_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = from._internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    _this->_internal_set_memory_usage(from._internal_memory_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = from._internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    _this->_internal_set_disk_usage(from._internal_disk_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = from._internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    _this->_internal_set_network(from._internal_network());
  }
  if (from._internal_working_block_count() != 0) {
    _this->_internal_set_working_block_count(from._internal_working_block_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDMetricList_CSDMetric::CopyFrom(const CSDMetricList_CSDMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDMetricList_CSDMetric::IsInitialized() const {
  return true;
}

void CSDMetricList_CSDMetric::InternalSwap(CSDMetricList_CSDMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDMetricList_CSDMetric, _impl_.working_block_count_)
      + sizeof(CSDMetricList_CSDMetric::_impl_.working_block_count_)
      - PROTOBUF_FIELD_OFFSET(CSDMetricList_CSDMetric, _impl_.cpu_usage_)>(
          reinterpret_cast<char*>(&_impl_.cpu_usage_),
          reinterpret_cast<char*>(&other->_impl_.cpu_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDMetricList_CSDMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_getter, &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_once,
      file_level_metadata_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto[0]);
}

// ===================================================================

class CSDMetricList::_Internal {
 public:
};

CSDMetricList::CSDMetricList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDMetricList)
}
CSDMetricList::CSDMetricList(const CSDMetricList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDMetricList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.csd_metric_list_){from._impl_.csd_metric_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDMetricList)
}

inline void CSDMetricList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.csd_metric_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDMetricList::~CSDMetricList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDMetricList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDMetricList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.csd_metric_list_.~RepeatedPtrField();
}

void CSDMetricList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDMetricList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDMetricList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.csd_metric_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDMetricList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csd_metric_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDMetricList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDMetricList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_csd_metric_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_csd_metric_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDMetricList)
  return target;
}

size_t CSDMetricList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDMetricList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  total_size += 1UL * this->_internal_csd_metric_list_size();
  for (const auto& msg : this->_impl_.csd_metric_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDMetricList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDMetricList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDMetricList::GetClassData() const { return &_class_data_; }


void CSDMetricList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDMetricList*>(&to_msg);
  auto& from = static_cast<const CSDMetricList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDMetricList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.csd_metric_list_.MergeFrom(from._impl_.csd_metric_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDMetricList::CopyFrom(const CSDMetricList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDMetricList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDMetricList::IsInitialized() const {
  return true;
}

void CSDMetricList::InternalSwap(CSDMetricList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.csd_metric_list_.InternalSwap(&other->_impl_.csd_metric_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDMetricList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_getter, &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_once,
      file_level_metadata_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto[1]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StorageEngineInstance.Result.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Result.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_getter, &descriptor_table_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto_once,
      file_level_metadata_csd_2dto_2dmetric_2dcollector_2dgrpc_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDMetricList_CSDMetric*
Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDMetricList_CSDMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDMetricList_CSDMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDMetricList*
Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDMetricList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDMetricList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Result*
Arena::CreateMaybeMessage< ::StorageEngineInstance::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
